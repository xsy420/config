noremap H ^
noremap L $

inoremap jk <Esc>

"nnoremap :action LeaderAction
nnoremap < <<
nnoremap > >>

map <c-c> :qa<CR>


"显示行号
"set nu
"显示相对行号
set relativenumber
"在光标所在行下显示一条线
set cursorline
"自动换行
set wrap
"在右下角显示输入的字符
set showcmd
set helplang=cn
"搜索
"忽略大小写
set ignorecase
set hls
exec "nohls"
set smartcase

set backspace   =indent,eol,start  " Make backspace work as you would expect.

" 上下保证5行显示
set scrolloff=5

""" Idea specific settings ------------------
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep

"恢复到上次关闭⽂件时光标所在的位置
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

"able to copy into clipboard and paste to other web, terminal or anywhere
set clipboard+=unnamed,unnamedplus

"Plug

set NERDTree
set surround
set ReplaceWithRegister
set easymotion
set keep-english-in-normal
set which-key
set notimeout
set sneak
set multiple-cursors

"ide ctrl mapping
sethandler <C-C> a:vim
sethandler <C-A> a:vim
sethandler <C-D> a:vim
sethandler <C-X> a:vim
sethandler <C-V> a:vim
sethandler <C-O> a:vim
sethandler <C-I> a:vim
sethandler <C-R> a:vim

let mapleader = " "

" paste之后不会把yank的内容替换掉
vmap p \"_dp

"which-key
":actionlist<cr>
"<ctrl> + <shift> + a

" Base Setting
let g:WhichKey_ShowVimActions = "false"
let g:WhichKey_FontFamily = "Jetbrains Mono"
let g:WhichKey_FontSize = 20

let g:WhichKey_KeyStyle = "bold"
let g:WhichKey_KeyColor = "red"
let g:WhichKey_PrefixStyle = "bold"
let g:WhichKey_PrefixColor = "blue"
let g:WhichKey_CommandStyle = "bold"
let g:WhichKey_CommandColor = "green"





let g:WhichKeyDesc_FindOrFormat = "<leader>f FindOrFormat"
let g:WhichKeyDesc_FindOrFormat_FindFile = "<leader>ff FindFile"
nmap <leader>ff <action>(GotoFile)

let g:WhichKeyDesc_FindOrFormat_FindFileLocation = "<leader>fl FindFileLocation"
nmap <leader>fl <action>(SelectInProjectView)

let g:WhichKeyDesc_FindOrFormat_FindText = "<leader>ft FindText"
nmap <leader>ft <action>(FindInPath)

let g:WhichKeyDesc_FindOrFormat_Commands = "<leader>fc Commands"
nmap <leader>fc <action>(GotoAction)

let g:WhichKeyDesc_FindOrFormat_OpenedProject = "<leader>fp OpenedProject"
nmap <leader>fp <action>(OpenProjectWindows)

let g:WhichKeyDesc_FindOrFormat_Format = "<leader>fm Format"
nmap <leader>fm <action>(ReformatCode) \| <action>(OptimizeImports)

" s: Show Or Split ⭐️
let g:WhichKeyDesc_ShowOrSplit = "<leader>s Show Or Split"
let g:WhichKeyDesc_ShowOrSplit_VimActions = "<leader>sv ShowVimActions"

nmap <leader>sv <action>(VimActions)

let g:WhichKeyDesc_ShowOrSplit_SplitLeft = "<leader>sh SplitLeft"
nmap <leader>sh :set nosplitright<CR>:vsplit<CR>:set splitright<CR>

let g:WhichKeyDesc_ShowOrSplit_SplitRight = "<leader>sl SplitRight"
nmap <leader>sl :set splitright<CR>:vsplit<CR>

let g:WhichKeyDesc_ShowOrSplit_SplitUp = "<leader>sk SplitUp"
nmap <leader>sk :set nosplitbelow<CR>:split<CR>:set splitbelow<CR>

let g:WhichKeyDesc_ShowOrSplit_SplitDown = "<leader>sj SplitDown"
nmap <leader>sj :set splitbelow<CR>:split<CR>

" r: Run/Re ⭐️
let g:WhichKeyDesc_RunOrRe = "<leader>r RunOrRe"

let g:WhichKeyDesc_RunOrRe_Rename = "<leader>rn Rename"
nmap <leader>rn <action>(RenameElement)

let g:WhichKeyDesc_RunOrRe_RunCurrent = "<leader>rr RunCurrent"
nmap <leader>rr <action>(Run)


" z: zip(fold) ⭐️
let g:WhichKeyDesc_Zip = "<leader>z Zip"
let g:WhichKeyDesc_Zip_unZipAll = "<leader>zc unZipAll"
nmap <leader>zc <action>(ExpandAllRegions)

let g:WhichKeyDesc_Zip_ZipAll = "<leader>zo ZipAll"
nmap <leader>zo <action>(CollapseAllRegions)

" c: Close ⭐️;
let g:WhichKeyDesc_CloseBuffer = "<leader>c CloseBuffer"
nmap <leader>c :q!<CR>

" e: Toggle Explorer ⭐️
let g:WhichKeyDesc_ToggleExplorer = "<leader>e ToggleExplorer"
map <leader>e <action>(ActivateProjectToolWindow)

" t: Tab⭐️
let g:WhichKeyDesc_Tab = "t Tab"

let g:WhichKeyDesc_Tab_Next = "tn Next Tab"
nnoremap tn :tabnext<CR>

let g:WhichKeyDesc_Tab_Previous = "tb Previous Tab"
nnoremap tb :tabprevious<CR>

let g:WhichKeyDesc_Goto = "g Goto"

let g:WhichKeyDesc_Goto_GotoNextError = "ge GotoNextError"
nmap ge <action>(GotoNextError)

let g:WhichKeyDesc_Goto_GotoTest = "gt GotoTest"
nmap gt <action>(GotoTest)

let g:WhichKeyDesc_Goto_MethodUp = "gm MethodUp"
nmap gm <action>(MethodUp)

" last changed in current buffer(file)
let g:WhichKeyDesc_Goto_LastChange = "ga LastChange"
nmap ga '.

let g:WhichKeyDesc_EasyMotion = "<leader><leader> EasyMotion Prefix"

"let g:WhichKeyDesc_Material = "<leader>m Material"

let g:WhichKeyDesc_Actions = "<leader>a Actions"

let g:WhichKeyDesc_Actions_New = "<leader>an New"

nmap <leader>an <action>(NewElement)
